// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/storageAndSearching.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FetchAndSearchGRPCClient is the client API for FetchAndSearchGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchAndSearchGRPCClient interface {
	Ping(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*PongResponse, error)
	SingleFetch(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	ContinuousFetch(ctx context.Context, opts ...grpc.CallOption) (FetchAndSearchGRPC_ContinuousFetchClient, error)
	Search(ctx context.Context, in *SearchCriteria, opts ...grpc.CallOption) (FetchAndSearchGRPC_SearchClient, error)
}

type fetchAndSearchGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchAndSearchGRPCClient(cc grpc.ClientConnInterface) FetchAndSearchGRPCClient {
	return &fetchAndSearchGRPCClient{cc}
}

func (c *fetchAndSearchGRPCClient) Ping(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/fetch_and_search.FetchAndSearchGRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchAndSearchGRPCClient) SingleFetch(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/fetch_and_search.FetchAndSearchGRPC/SingleFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchAndSearchGRPCClient) ContinuousFetch(ctx context.Context, opts ...grpc.CallOption) (FetchAndSearchGRPC_ContinuousFetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FetchAndSearchGRPC_ServiceDesc.Streams[0], "/fetch_and_search.FetchAndSearchGRPC/ContinuousFetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fetchAndSearchGRPCContinuousFetchClient{stream}
	return x, nil
}

type FetchAndSearchGRPC_ContinuousFetchClient interface {
	Send(*UserID) error
	Recv() (*User, error)
	grpc.ClientStream
}

type fetchAndSearchGRPCContinuousFetchClient struct {
	grpc.ClientStream
}

func (x *fetchAndSearchGRPCContinuousFetchClient) Send(m *UserID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fetchAndSearchGRPCContinuousFetchClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fetchAndSearchGRPCClient) Search(ctx context.Context, in *SearchCriteria, opts ...grpc.CallOption) (FetchAndSearchGRPC_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FetchAndSearchGRPC_ServiceDesc.Streams[1], "/fetch_and_search.FetchAndSearchGRPC/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &fetchAndSearchGRPCSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FetchAndSearchGRPC_SearchClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type fetchAndSearchGRPCSearchClient struct {
	grpc.ClientStream
}

func (x *fetchAndSearchGRPCSearchClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FetchAndSearchGRPCServer is the server API for FetchAndSearchGRPC service.
// All implementations must embed UnimplementedFetchAndSearchGRPCServer
// for forward compatibility
type FetchAndSearchGRPCServer interface {
	Ping(context.Context, *NoParams) (*PongResponse, error)
	SingleFetch(context.Context, *UserID) (*User, error)
	ContinuousFetch(FetchAndSearchGRPC_ContinuousFetchServer) error
	Search(*SearchCriteria, FetchAndSearchGRPC_SearchServer) error
	mustEmbedUnimplementedFetchAndSearchGRPCServer()
}

// UnimplementedFetchAndSearchGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedFetchAndSearchGRPCServer struct {
}

func (UnimplementedFetchAndSearchGRPCServer) Ping(context.Context, *NoParams) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFetchAndSearchGRPCServer) SingleFetch(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleFetch not implemented")
}
func (UnimplementedFetchAndSearchGRPCServer) ContinuousFetch(FetchAndSearchGRPC_ContinuousFetchServer) error {
	return status.Errorf(codes.Unimplemented, "method ContinuousFetch not implemented")
}
func (UnimplementedFetchAndSearchGRPCServer) Search(*SearchCriteria, FetchAndSearchGRPC_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFetchAndSearchGRPCServer) mustEmbedUnimplementedFetchAndSearchGRPCServer() {}

// UnsafeFetchAndSearchGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchAndSearchGRPCServer will
// result in compilation errors.
type UnsafeFetchAndSearchGRPCServer interface {
	mustEmbedUnimplementedFetchAndSearchGRPCServer()
}

func RegisterFetchAndSearchGRPCServer(s grpc.ServiceRegistrar, srv FetchAndSearchGRPCServer) {
	s.RegisterService(&FetchAndSearchGRPC_ServiceDesc, srv)
}

func _FetchAndSearchGRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchAndSearchGRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetch_and_search.FetchAndSearchGRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchAndSearchGRPCServer).Ping(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchAndSearchGRPC_SingleFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchAndSearchGRPCServer).SingleFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetch_and_search.FetchAndSearchGRPC/SingleFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchAndSearchGRPCServer).SingleFetch(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchAndSearchGRPC_ContinuousFetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FetchAndSearchGRPCServer).ContinuousFetch(&fetchAndSearchGRPCContinuousFetchServer{stream})
}

type FetchAndSearchGRPC_ContinuousFetchServer interface {
	Send(*User) error
	Recv() (*UserID, error)
	grpc.ServerStream
}

type fetchAndSearchGRPCContinuousFetchServer struct {
	grpc.ServerStream
}

func (x *fetchAndSearchGRPCContinuousFetchServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fetchAndSearchGRPCContinuousFetchServer) Recv() (*UserID, error) {
	m := new(UserID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FetchAndSearchGRPC_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchCriteria)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FetchAndSearchGRPCServer).Search(m, &fetchAndSearchGRPCSearchServer{stream})
}

type FetchAndSearchGRPC_SearchServer interface {
	Send(*User) error
	grpc.ServerStream
}

type fetchAndSearchGRPCSearchServer struct {
	grpc.ServerStream
}

func (x *fetchAndSearchGRPCSearchServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// FetchAndSearchGRPC_ServiceDesc is the grpc.ServiceDesc for FetchAndSearchGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchAndSearchGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fetch_and_search.FetchAndSearchGRPC",
	HandlerType: (*FetchAndSearchGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FetchAndSearchGRPC_Ping_Handler,
		},
		{
			MethodName: "SingleFetch",
			Handler:    _FetchAndSearchGRPC_SingleFetch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContinuousFetch",
			Handler:       _FetchAndSearchGRPC_ContinuousFetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _FetchAndSearchGRPC_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/storageAndSearching.proto",
}
